---
- block:

  - name: "Setup the webhook secret"
    k8s:
      state: present
      definition: "{{ lookup('template', 'secret-webhook-server-secret.yml.j2') }}"

  - name: "Setup controller config map"
    k8s:
      state : present
      definition: "{{ lookup('template', 'configmap-controller.yml.j2') }}"

  - name: "Setup inventory service to generate serving cert"
    k8s:
      state: present
      definition: "{{ lookup('template', 'service-inventory.yml.j2') }}"

  - name: "Setup controller deployment"
    k8s:
      state : present
      definition: "{{ lookup('template', 'deployment-controller.yml.j2') }}"

  - name: "Setup controller service"
    k8s:
      state : present
      definition: "{{ lookup('template', 'service-controller.yml.j2') }}"

  - name: "Setup inventory route"
    k8s:
      state: present
      definition: "{{ lookup('template', 'route-inventory.yml.j2') }}"

  - name: "Set up default Provider"
    k8s:
      state: present
      definition: "{{ lookup('template', 'provider-host.yml.j2') }}"

  - name: "Installing the Provisioner CR"
    k8s:
      state: present
      definition: "{{ lookup('template', item) }}"
    with_fileglob: "templates/provisioner-*.j2"

  - when: feature_validation|bool
    block:
    - name: "Setup validation deployment"
      k8s:
        state : present
        definition: "{{ lookup('template', 'deployment-validation.yml.j2') }}"

    - name: "Setup validation service"
      k8s:
        state : present
        definition: "{{ lookup('template', 'service-validation.yml.j2') }}"

  - when: feature_ui|bool
    block:
    - name: "Obtain OCP version"
      k8s_info:
        kind: ClusterVersion
        name: version
      register: ocp_cv

    - name: "Extract OCP version"
      set_fact:
        forklift_cluster_version: "{{ ocp_cv | json_query(query) | first }}"
      vars:
        query: "resources[0].status.history[?state=='Completed'].version"

    - name: "Setup UI route"
      k8s:
        state: present
        definition: "{{ lookup('template', 'route-ui.yml.j2') }}"

    - name: "Obtain MTV UI route (timeout 60s)"
      k8s_info:
        api_version: "route.openshift.io/v1"
        kind: "Route"
        namespace: "{{ app_namespace }}"
        name: "{{ ui_route_name }}"
      register: route
      until: route.resources | length > 0
      delay: 10
      retries: 6

    - name: "Get the Forklift UI FQDN from the route"
      set_fact:
        ui_route_fqdn: "{{ route.resources[0].spec.host }}"

    - name: "Configure CORS allowed origins for UI"
      set_fact:
        cors_origins:
        - "(?i)//{{ ui_route_fqdn }}(:|\\z)"
        - "//127.0.0.1(:|$)"
        - "//localhost(:|$)"

    - name: "Check if UI oauthclient exists already so we don't update it"
      k8s_info:
        api_version: v1
        kind: OAuthClient
        name: "{{ ui_service_name }}"
        namespace: "{{ app_namespace }}"
      register: ui_oauthclient_status

    - when: (ui_oauthclient_status.resources | length) == 0
      block:
      - name: "Generate random secret value for oauth client"
        set_fact:
          ui_oauth_secret: "{{ 99999999 | random | to_uuid | b64encode }}"

      - name: "Setup UI oauthclient"
        k8s:
          state: present
          definition: "{{ lookup('template', 'oauthclient-ui.yml.j2') }}"

    - name: "Use existing secret value for oauth client"
      set_fact:
        ui_oauth_secret: "{{ ui_oauthclient_status.resources[0].secret }}"
      when: (ui_oauthclient_status.resources | length) > 0

    - block:
      - name: "Retrieve apiserver config definition"
        k8s_info:
          api_version: "config.openshift.io/v1"
          kind: "apiserver"
          name: "cluster"
        register: apiservers

      - when: apiservers.resources[0].spec.additionalCORSAllowedOrigins is not defined or
                (cors_origins | difference(apiservers.resources[0].spec.additionalCORSAllowedOrigins|default([])))|length > 0
        block:
        - set_fact:
            apiserver_definition: "{{ apiservers.resources[0] }}"

        - name: "Add CORS URL to apiserver config definition"
          yedit:
            content: "{{ apiserver_definition }}"
            key: spec.additionalCORSAllowedOrigins
            append: true
            value: "{{ item }}"
          with_items: "{{ cors_origins | difference(apiserver.resources[0].spec.additionalCORSAllowedOrigins|default([])) }}"

        - name: "Update apiserver config definition on the cluster"
          k8s:
            state: present
            definition: "{{ apiserver_definition }}"

    - name: "Setup UI config map"
      k8s:
        state: present
        definition: "{{ lookup('template', 'configmap-ui.yml.j2') }}"

    - name: "Setup UI service to generate serving cert"
      k8s:
        state: present
        definition: "{{ lookup('template', 'service-ui.yml.j2') }}"

    - name: "Setup UI deployment"
      k8s:
        state: present
        definition: "{{ lookup('template', 'deployment-ui.yml.j2') }}"
